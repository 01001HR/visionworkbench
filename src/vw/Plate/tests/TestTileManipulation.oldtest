// __BEGIN_LICENSE__
// Copyright (C) 2006-2010 United States Government as represented by
// the Administrator of the National Aeronautics and Space Administration.
// All Rights Reserved.
// __END_LICENSE__


#include <vw/Plate/TileManipulation.h>
#include <cxxtest/TestSuite.h>
#include <boost/foreach.hpp>

using namespace std;
using namespace vw;
using namespace vw::platefile;

#define bbox_does_tile_area(bbox, width, height, total_tiles)\
  _bbox_does_tile_area(bbox, width, height, total_tiles, string(__FILE__) + ":" + stringify(__LINE__))

void _bbox_does_tile_area(const BBox2i& bbox, unsigned width, unsigned height, unsigned total_tiles, const std::string message) {
  list<BBox2i> tiles = bbox_tiles(bbox, width, height);
  TSM_ASSERT_EQUALS(message.c_str(), tiles.size(), total_tiles);

  BBox2i total_bbox;

  // It should completely tile the space. No tile should overlap.
  BOOST_FOREACH( const BBox2i& box, tiles ) {

    // Tiles are allowed to be smaller than the requested size. Just not larger.
    TSM_ASSERT_LESS_THAN_EQUALS(message.c_str(), box.width(),  (int)width);
    TSM_ASSERT_LESS_THAN_EQUALS(message.c_str(), box.height(), (int)height);

    // One of the boxes should be the same.
    bool intersected = false;

    // Make sure it doesn't intersect any other box
    BOOST_FOREACH( const BBox2i& new_box, tiles ) {
      if (box.intersects(new_box)) {
        TSM_ASSERT(message.c_str(), !intersected);
        intersected = true;
      }
    }

    total_bbox.grow(bbox);
  }

  // Make sure that the union of all tiles is the original bbox
  TSM_ASSERT_EQUALS(message.c_str(), total_bbox, bbox);
}


class TestBlobManager : public CxxTest::TestSuite {

public:

  void test_bbox_tiles() {
    bbox_does_tile_area(BBox2i(0,0,8,12), 4, 4, 6);
  }

  void test_bbox_weird() {
    bbox_does_tile_area(BBox2i(7,17,31,13), 7, 5, 15);
  }

}; // class TestBlobManager
