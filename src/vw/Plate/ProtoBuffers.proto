// __BEGIN_LICENSE__
// Copyright (C) 2006, 2007 United States Government as represented by
// the Administrator of the National Aeronautics and Space Administration.
// All Rights Reserved.
// __END_LICENSE__

package vw.platefile;

// ----------------------------------------------------------------------
//               Index file & Blob file Data Structures
// ----------------------------------------------------------------------

// Each entry in the blob file is described by a BlobRecord.  This
// allows us to save and access data and headers with variable
// positioning and length.  BlobRecords are stored in the blob files:
// <platefile>/plate_<#>.blob
message BlobRecord {
  required uint32 header_offset = 1;
  required uint32 header_size = 2;
  required uint32 data_offset = 3;
  required uint32 data_size = 4;
}

// The IndexHeader store basic metadata for the platefile, such as the
// default tile size, file type, and map projection information.
// This is typically stored in the <platfile>/plate.index file.
message IndexHeader {
  optional int32 platefile_version = 1;
  optional uint32 default_tile_size = 2;
  optional string default_file_type = 3;
  optional int32 pixel_format = 4;
  optional int32 channel_type = 5;
  optional int32 transaction_read_cursor = 6 [default = 0];
  optional int32 transaction_write_cursor = 7 [default = 1];
  repeated int32 complete_transaction_ids = 8 [packed = true];
}

// ----------------------------------------------------------------------
//                         Tile Data Structures
// ----------------------------------------------------------------------

enum IndexRecordStatusType {
  INDEX_RECORD_EMPTY = 1;
  INDEX_RECORD_STALE = 2;
  INDEX_RECORD_VALID = 3;
}

// The IndexRecord stores basic metadata for locating a tile in a
// blob.  The IndexRecord is used to store this information in a live
// index (in main memory), and can also be stored as part of a
// TileHeader, which is written to the blob file on disk.  Other
// metadata about that tile is stored alongside the tile itself in the
// blobfile in a TileRecord protobufer (see below).
message IndexRecord {
  required uint32 blob_id = 1;
  required uint64 blob_offset = 2;
  optional IndexRecordStatusType status = 3 [ default = INDEX_RECORD_EMPTY ];
  optional uint32 tile_size = 5;
}

// The TileRecord store metadata about the tile itself as well as the
// information needed to place the tile back into the index tree.  The
// [col, row, depth, transaction_id] info can be used to reconstruct the index
// by reading TileRecords in the blob files.
message TileHeader {
  required int32 col = 5;
  required int32 row = 6;
  required int32 depth = 7;
  optional uint64 transaction_id = 8 [ default = 0 ];
  optional string filetype = 10 [ default = 'jpg' ];
}

// ----------------------------------------------------------------------
//             Remote Procedure Calls (RPC) for Index Server
// ----------------------------------------------------------------------

// ----------------------------------
// Client --> Server Requests
// ----------------------------------

message IndexOpenRequest {
  required string requestor = 1;
  required string plate_filename = 10;
  optional string mode = 11 [default = "read"]; // [ 'read' | 'readwrite' ]
}

message IndexCloseRequest {
  required string requestor = 1;
  required int32 platefile_id = 2;
  required int32 secret = 3;
}

message IndexCreate {
  required string requestor = 1;
  required string plate_filename = 10;
  required string projection_type = 11;
  required int32 default_block_size = 12;
  required string default_filetype = 13;
}

message IndexReadRequest {
  required string requestor = 1;
  required int32 platefile_id = 2;
  required int32 secret = 3;

  required int32 col = 10;
  required int32 row = 11;
  required int32 depth = 12;
  required int32 transaction_id = 13 [default = 0];
}

message IndexWriteRequest {
  required string requestor = 1;
  required int32 platefile_id = 2;
  required int32 secret = 3;

  required int32 size = 10;
}

message IndexWriteComplete {
  required string requestor = 1;
  required int32 platefile_id = 2;
  required int32 secret = 3;

  required TileHeader header = 10;
  required IndexRecord record = 11;
}

message IndexDepthRequest {
  required string requestor = 1;
  required int32 platefile_id = 2;
  required int32 secret = 3;
}

// ----------------------------------
// Server --> Client Responses
// ----------------------------------

message IndexError {
  required string message = 10;
}

message IndexOpenReply {
  required int32 platefile_id = 10;
  required int32 secret = 11;
  required IndexHeader index_header = 12;
}

message IndexReadReply {
  required IndexRecord index_record = 10;
}

message IndexSuccess {
  optional string message = 10;
}

message IndexWriteReply {
  required int32 blob_id = 10;
}

message IndexDepthReply {
  required int32 depth = 10;
}

