// __BEGIN_LICENSE__
// Copyright (C) 2006-2009 United States Government as represented by
// the Administrator of the National Aeronautics and Space Administration.
// All Rights Reserved.
// __END_LICENSE__

#include <vw/Plate/ToastDem.h>>
#include <vw/Image/Interpolation.h>>
using namespace vw;

// ---------------------------------------------------------------------------------
//                                WWT DEM Indices
// ---------------------------------------------------------------------------------

namespace {
  static int const u_toast_indices[] = { 0,16,32,0,16,32,0,16,32,8,8,16,8,0,8,12,12,16,12,16,12,8,4,4,12,12,8,4,0,4,8,12,12,4,4,0,4,8,4,14,14,16,14,16,14,12,10,10,14,14,12,14,16,14,12,10,10,14,14,16,14,12,14,4,2,2,6,6,8,6,8,6,4,6,6,10,10,8,10,8,10,12,14,14,10,10,12,2,0,2,4,6,6,2,2,0,2,4,2,12,14,14,10,10,8,10,8,10,12,10,10,2,2,0,2,0,2,4,6,6,2,2,4,6,8,6,4,2,2,6,6,8,6,4,6,24,24,32,24,16,24,28,28,32,28,32,28,24,20,20,28,28,24,20,16,20,24,28,28,20,20,16,20,24,20,30,30,32,30,32,30,28,26,26,30,30,28,30,32,30,28,26,26,30,30,32,30,28,30,20,18,18,22,22,24,22,24,22,20,22,22,26,26,24,26,24,26,28,30,30,26,26,28,18,16,18,20,22,22,18,18,16,18,20,18,28,30,30,26,26,24,26,24,26,28,26,26,18,18,16,18,16,18,20,22,22,18,18,20,22,24,22,20,18,18,22,22,24,22,20,22,8,8,16,8,0,8,12,12,16,12,16,12,8,4,4,12,12,8,4,0,4,8,12,12,4,4,0,4,8,4,14,14,16,14,16,14,12,10,10,14,14,12,14,16,14,12,10,10,14,14,16,14,12,14,4,2,2,6,6,8,6,8,6,4,6,6,10,10,8,10,8,10,12,14,14,10,10,12,2,0,2,4,6,6,2,2,0,2,4,2,12,14,14,10,10,8,10,8,10,12,10,10,2,2,0,2,0,2,4,6,6,2,2,4,6,8,6,4,2,2,6,6,8,6,4,6,24,24,32,24,16,24,28,28,32,28,32,28,24,20,20,28,28,24,20,16,20,24,28,28,20,20,16,20,24,20,30,30,32,30,32,30,28,26,26,30,30,28,30,32,30,28,26,26,30,30,32,30,28,30,20,18,18,22,22,24,22,24,22,20,22,22,26,26,24,26,24,26,28,30,30,26,26,28,18,16,18,20,22,22,18,18,16,18,20,18,28,30,30,26,26,24,26,24,26,28,26,26,18,18,16,18,16,18,20,22,22,18,18,20,22,24,22,20,18,18,22,22,24,22,20,22};

  static int const v_toast_indices[] = {0,0,0,16,16,16,32,32,32,0,8,8,8,8,16,8,12,12,4,4,0,4,0,4,8,4,4,12,12,16,12,16,12,8,4,4,12,12,8,12,14,14,10,10,8,10,8,10,12,10,10,2,2,0,2,0,2,4,6,6,2,2,4,2,0,2,4,6,6,2,2,0,2,4,2,4,2,2,6,6,8,6,8,6,4,6,6,14,14,16,14,16,14,12,10,10,14,14,12,14,16,14,12,10,10,14,14,16,14,12,14,4,2,2,6,6,8,6,8,6,4,6,6,10,10,8,10,8,10,12,14,14,10,10,12,0,8,8,8,8,16,8,12,12,4,4,0,4,0,4,8,4,4,12,12,16,12,16,12,8,4,4,12,12,8,12,14,14,10,10,8,10,8,10,12,10,10,2,2,0,2,0,2,4,6,6,2,2,4,2,0,2,4,6,6,2,2,0,2,4,2,4,2,2,6,6,8,6,8,6,4,6,6,14,14,16,14,16,14,12,10,10,14,14,12,14,16,14,12,10,10,14,14,16,14,12,14,4,2,2,6,6,8,6,8,6,4,6,6,10,10,8,10,8,10,12,14,14,10,10,12,16,24,24,24,24,32,24,28,28,20,20,16,20,16,20,24,20,20,28,28,32,28,32,28,24,20,20,28,28,24,28,30,30,26,26,24,26,24,26,28,26,26,18,18,16,18,16,18,20,22,22,18,18,20,18,16,18,20,22,22,18,18,16,18,20,18,20,18,18,22,22,24,22,24,22,20,22,22,30,30,32,30,32,30,28,26,26,30,30,28,30,32,30,28,26,26,30,30,32,30,28,30,20,18,18,22,22,24,22,24,22,20,22,22,26,26,24,26,24,26,28,30,30,26,26,28,16,24,24,24,24,32,24,28,28,20,20,16,20,16,20,24,20,20,28,28,32,28,32,28,24,20,20,28,28,24,28,30,30,26,26,24,26,24,26,28,26,26,18,18,16,18,16,18,20,22,22,18,18,20,18,16,18,20,22,22,18,18,16,18,20,18,20,18,18,22,22,24,22,24,22,20,22,22,30,30,32,30,32,30,28,26,26,30,30,28,30,32,30,28,26,26,30,30,32,30,28,30,20,18,18,22,22,24,22,24,22,20,22,22,26,26,24,26,24,26,28,30,30,26,26,28};

  static const int num_toast_indices = 513;
}

void vw::platefile::save_toast_dem_tile(std::string base_output_name, 
                                        boost::shared_ptr<PlateFile> platefile, 
                                        int32 col, int32 row, int32 level, 
                                        int32 transaction_id) {
  try {
      
    // Create the level directory (if it doesn't exist)
    std::ostringstream ostr;
    ostr << base_output_name << "/" << level;
    if ( !fs::exists(ostr.str()) )
      fs::create_directory(ostr.str());
    
    // Create the column directory (if it doesn't exist)
    ostr << "/" << col;
    if ( !fs::exists(ostr.str()) )
      fs::create_directory(ostr.str());
    
    // Create the file (with the row as the filename)
    ostr << "/" << row;
    
    // Read the tile & prepare an interpolation view for sampling it.
    ImageView<PixelGrayA<int16> > tile;
    platefile->read(tile, col, row, level, transaction_id);


    InterpolationView<ImageView<PixelGrayA<int16> >, BilinearInterpolation > interp_tile(tile, 
                                                                  BilinearInterpolation()); 
    
    // Open the file for writing
    std::ofstream of(ostr.str().c_str());
    
    // Iterate over the triangle vertex arrays above, writing the DEM
    // values in INTEL byte order to disk.
    for (int i = 0; i < num_toast_indices; ++i) {
      float u_index = float(u_toast_indices[i]) / 32.0 * (interp_tile.cols() - 1);
      float v_index = float(v_toast_indices[i]) / 32.0 * (interp_tile.rows() - 1);

      // TODO: Thing about what to do if the pixel has alpha!
      //      PixelGrayA<int16> value = interp_tile( u_index, v_index );
      PixelGrayA<int16> value;
      if (u_index > v_index)
        value[0] = 500;
      else 
        value[0] = -500;
      uint8 lsb = uint8(value[0] & 0xFF);
      uint8 msb = uint8((value[0] >> 8) & 0xFF);
      of.write((char*)(&lsb), 1);
      of.write((char*)(&msb), 1);
    }

    // Clean up.
    of.close();

  } catch (TileNotFoundErr &e) { 
    // Do nothing if the tile does not exist
  }

}
