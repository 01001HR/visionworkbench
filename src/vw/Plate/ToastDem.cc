// __BEGIN_LICENSE__
// Copyright (C) 2006-2009 United States Government as represented by
// the Administrator of the National Aeronautics and Space Administration.
// All Rights Reserved.
// __END_LICENSE__

#include <vw/Plate/ToastDem.h>
#include <vw/Image/Interpolation.h>
using namespace vw;

// ---------------------------------------------------------------------------------
//                                WWT DEM Indices
// ---------------------------------------------------------------------------------

namespace {

  // DEM triangle indices for the upper right (0-90 degrees) and lower
  // left (180-270 degrees) quadrants of the TOAST space.
  static int const ur_ll_quadrant_u_toast_indices[] = { 0,16,32,0,16,32,0,16,32,8,8,16,8,0,8,12,12,16,12,16,12,8,4,4,12,12,8,4,0,4,8,12,12,4,4,0,4,8,4,14,14,16,14,16,14,12,10,10,14,14,12,14,16,14,12,10,10,14,14,16,14,12,14,4,2,2,6,6,8,6,8,6,4,6,6,10,10,8,10,8,10,12,14,14,10,10,12,2,0,2,4,6,6,2,2,0,2,4,2,12,14,14,10,10,8,10,8,10,12,10,10,2,2,0,2,0,2,4,6,6,2,2,4,6,8,6,4,2,2,6,6,8,6,4,6,24,24,32,24,16,24,28,28,32,28,32,28,24,20,20,28,28,24,20,16,20,24,28,28,20,20,16,20,24,20,30,30,32,30,32,30,28,26,26,30,30,28,30,32,30,28,26,26,30,30,32,30,28,30,20,18,18,22,22,24,22,24,22,20,22,22,26,26,24,26,24,26,28,30,30,26,26,28,18,16,18,20,22,22,18,18,16,18,20,18,28,30,30,26,26,24,26,24,26,28,26,26,18,18,16,18,16,18,20,22,22,18,18,20,22,24,22,20,18,18,22,22,24,22,20,22,8,8,16,8,0,8,12,12,16,12,16,12,8,4,4,12,12,8,4,0,4,8,12,12,4,4,0,4,8,4,14,14,16,14,16,14,12,10,10,14,14,12,14,16,14,12,10,10,14,14,16,14,12,14,4,2,2,6,6,8,6,8,6,4,6,6,10,10,8,10,8,10,12,14,14,10,10,12,2,0,2,4,6,6,2,2,0,2,4,2,12,14,14,10,10,8,10,8,10,12,10,10,2,2,0,2,0,2,4,6,6,2,2,4,6,8,6,4,2,2,6,6,8,6,4,6,24,24,32,24,16,24,28,28,32,28,32,28,24,20,20,28,28,24,20,16,20,24,28,28,20,20,16,20,24,20,30,30,32,30,32,30,28,26,26,30,30,28,30,32,30,28,26,26,30,30,32,30,28,30,20,18,18,22,22,24,22,24,22,20,22,22,26,26,24,26,24,26,28,30,30,26,26,28,18,16,18,20,22,22,18,18,16,18,20,18,28,30,30,26,26,24,26,24,26,28,26,26,18,18,16,18,16,18,20,22,22,18,18,20,22,24,22,20,18,18,22,22,24,22,20,22};

  static int const ur_ll_quadrant_v_toast_indices[] = {0,0,0,16,16,16,32,32,32,0,8,8,8,8,16,8,12,12,4,4,0,4,0,4,8,4,4,12,12,16,12,16,12,8,4,4,12,12,8,12,14,14,10,10,8,10,8,10,12,10,10,2,2,0,2,0,2,4,6,6,2,2,4,2,0,2,4,6,6,2,2,0,2,4,2,4,2,2,6,6,8,6,8,6,4,6,6,14,14,16,14,16,14,12,10,10,14,14,12,14,16,14,12,10,10,14,14,16,14,12,14,4,2,2,6,6,8,6,8,6,4,6,6,10,10,8,10,8,10,12,14,14,10,10,12,0,8,8,8,8,16,8,12,12,4,4,0,4,0,4,8,4,4,12,12,16,12,16,12,8,4,4,12,12,8,12,14,14,10,10,8,10,8,10,12,10,10,2,2,0,2,0,2,4,6,6,2,2,4,2,0,2,4,6,6,2,2,0,2,4,2,4,2,2,6,6,8,6,8,6,4,6,6,14,14,16,14,16,14,12,10,10,14,14,12,14,16,14,12,10,10,14,14,16,14,12,14,4,2,2,6,6,8,6,8,6,4,6,6,10,10,8,10,8,10,12,14,14,10,10,12,16,24,24,24,24,32,24,28,28,20,20,16,20,16,20,24,20,20,28,28,32,28,32,28,24,20,20,28,28,24,28,30,30,26,26,24,26,24,26,28,26,26,18,18,16,18,16,18,20,22,22,18,18,20,18,16,18,20,22,22,18,18,16,18,20,18,20,18,18,22,22,24,22,24,22,20,22,22,30,30,32,30,32,30,28,26,26,30,30,28,30,32,30,28,26,26,30,30,32,30,28,30,20,18,18,22,22,24,22,24,22,20,22,22,26,26,24,26,24,26,28,30,30,26,26,28,16,24,24,24,24,32,24,28,28,20,20,16,20,16,20,24,20,20,28,28,32,28,32,28,24,20,20,28,28,24,28,30,30,26,26,24,26,24,26,28,26,26,18,18,16,18,16,18,20,22,22,18,18,20,18,16,18,20,22,22,18,18,16,18,20,18,20,18,18,22,22,24,22,24,22,20,22,22,30,30,32,30,32,30,28,26,26,30,30,28,30,32,30,28,26,26,30,30,32,30,28,30,20,18,18,22,22,24,22,24,22,20,22,22,26,26,24,26,24,26,28,30,30,26,26,28};

  // DEM triangle indices for the upper left (90-180 degrees) and lower
  // left (270-360 degrees) quadrants of the TOAST space.
  static int const ul_lr_quadrant_u_toast_indices[] = {0,16,32,0,16,32,0,16,32,8,0,8,8,8,16,4,0,4,8,12,12,4,4,0,4,8,4,12,12,16,12,16,12,8,4,4,12,12,8,2,0,2,4,6,6,2,2,0,2,4,2,12,14,14,10,10,8,10,8,10,12,10,10,2,2,0,2,0,2,4,6,6,2,2,4,6,8,6,4,2,2,6,6,8,6,4,6,14,14,16,14,16,14,12,10,10,14,14,12,14,16,14,12,10,10,14,14,16,14,12,14,4,2,2,6,6,8,6,8,6,4,6,6,10,10,8,10,8,10,12,14,14,10,10,12,24,16,24,24,24,32,20,16,20,24,28,28,20,20,16,20,24,20,28,28,32,28,32,28,24,20,20,28,28,24,18,16,18,20,22,22,18,18,16,18,20,18,28,30,30,26,26,24,26,24,26,28,26,26,18,18,16,18,16,18,20,22,22,18,18,20,22,24,22,20,18,18,22,22,24,22,20,22,30,30,32,30,32,30,28,26,26,30,30,28,30,32,30,28,26,26,30,30,32,30,28,30,20,18,18,22,22,24,22,24,22,20,22,22,26,26,24,26,24,26,28,30,30,26,26,28,8,0,8,8,8,16,4,0,4,8,12,12,4,4,0,4,8,4,12,12,16,12,16,12,8,4,4,12,12,8,2,0,2,4,6,6,2,2,0,2,4,2,12,14,14,10,10,8,10,8,10,12,10,10,2,2,0,2,0,2,4,6,6,2,2,4,6,8,6,4,2,2,6,6,8,6,4,6,14,14,16,14,16,14,12,10,10,14,14,12,14,16,14,12,10,10,14,14,16,14,12,14,4,2,2,6,6,8,6,8,6,4,6,6,10,10,8,10,8,10,12,14,14,10,10,12,24,16,24,24,24,32,20,16,20,24,28,28,20,20,16,20,24,20,28,28,32,28,32,28,24,20,20,28,28,24,18,16,18,20,22,22,18,18,16,18,20,18,28,30,30,26,26,24,26,24,26,28,26,26,18,18,16,18,16,18,20,22,22,18,18,20,22,24,22,20,18,18,22,22,24,22,20,22,30,30,32,30,32,30,28,26,26,30,30,28,30,32,30,28,26,26,30,30,32,30,28,30,20,18,18,22,22,24,22,24,22,20,22,22,26,26,24,26,24,26,28,30,30,26,26,28};

  static int const ul_lr_quadrant_v_toast_indices[] = {0,0,0,16,16,16,32,32,32,0,8,8,8,16,8,8,12,12,4,4,0,4,0,4,8,4,4,12,16,12,8,4,4,12,12,16,12,8,12,12,14,14,10,10,8,10,8,10,12,10,10,2,2,0,2,0,2,4,6,6,2,2,4,2,0,2,4,6,6,2,2,0,2,4,2,4,2,2,6,6,8,6,8,6,4,6,6,14,16,14,12,10,10,14,14,16,14,12,14,4,2,2,6,6,8,6,8,6,4,6,6,14,14,16,14,16,14,12,10,10,14,14,12,10,8,10,12,14,14,10,10,8,10,12,10,0,8,8,8,16,8,8,12,12,4,4,0,4,0,4,8,4,4,12,16,12,8,4,4,12,12,16,12,8,12,12,14,14,10,10,8,10,8,10,12,10,10,2,2,0,2,0,2,4,6,6,2,2,4,2,0,2,4,6,6,2,2,0,2,4,2,4,2,2,6,6,8,6,8,6,4,6,6,14,16,14,12,10,10,14,14,16,14,12,14,4,2,2,6,6,8,6,8,6,4,6,6,14,14,16,14,16,14,12,10,10,14,14,12,10,8,10,12,14,14,10,10,8,10,12,10,16,24,24,24,32,24,24,28,28,20,20,16,20,16,20,24,20,20,28,32,28,24,20,20,28,28,32,28,24,28,28,30,30,26,26,24,26,24,26,28,26,26,18,18,16,18,16,18,20,22,22,18,18,20,18,16,18,20,22,22,18,18,16,18,20,18,20,18,18,22,22,24,22,24,22,20,22,22,30,32,30,28,26,26,30,30,32,30,28,30,20,18,18,22,22,24,22,24,22,20,22,22,30,30,32,30,32,30,28,26,26,30,30,28,26,24,26,28,30,30,26,26,24,26,28,26,16,24,24,24,32,24,24,28,28,20,20,16,20,16,20,24,20,20,28,32,28,24,20,20,28,28,32,28,24,28,28,30,30,26,26,24,26,24,26,28,26,26,18,18,16,18,16,18,20,22,22,18,18,20,18,16,18,20,22,22,18,18,16,18,20,18,20,18,18,22,22,24,22,24,22,20,22,22,30,32,30,28,26,26,30,30,32,30,28,30,20,18,18,22,22,24,22,24,22,20,22,22,30,30,32,30,32,30,28,26,26,30,30,28,26,24,26,28,30,30,26,26,24,26,28,26};

  static const int num_toast_indices = 513;
}

void vw::platefile::save_toast_dem_tile(std::string base_output_name, 
                                        boost::shared_ptr<PlateFile> platefile, 
                                        int32 col, int32 row, int32 level, 
                                        int32 transaction_id) {

  // First, we need to determine which set of triangle indices to use
  // for this tile.  For upper right and lower left quadrants, we use
  // the first set.  For upper left and lower right quadrants, we use
  // the second set.  This ensures that the long leg of the triangles
  // that cut across the square tile are oriented such that the match
  // up with the equator.
  int const* u_toast_indices;
  int const* v_toast_indices;
  int midpoint = pow(2,level)/2;
  if ( (col >= midpoint && row < midpoint) ||   // upper right
       (col < midpoint && row >= midpoint) ) {  // lower left
    u_toast_indices = ur_ll_quadrant_u_toast_indices;
    v_toast_indices = ur_ll_quadrant_v_toast_indices;
  } else { // upper left or lower right
    u_toast_indices = ul_lr_quadrant_u_toast_indices;
    v_toast_indices = ul_lr_quadrant_v_toast_indices;
  }

  // Next, we need to determine how many levels of difference there is
  // between the image tile size and the DEM tile size.  The latter is
  // 32x32.
  VW_DEBUG_ASSERT(platefile->default_tile_size() > 32, 
                  LogicErr() << "Platefile tile size must be larger than 32x32.");
  int level_difference = log(platefile->default_tile_size()/32) / log(2);

  try {

    // Read the tile & prepare an interpolation view for sampling it.
    ImageView<PixelGrayA<int16> > tile;
    platefile->read(tile, col, row, level, transaction_id);
    
    InterpolationView<ImageView<PixelGrayA<int16> >, BilinearInterpolation > interp_tile(tile, 
                                                                  BilinearInterpolation()); 
  
    int dem_level = level + level_difference;
    for (unsigned v = 0; v < pow(2,level_difference); ++v) {
      for (unsigned u = 0; u < pow(2,level_difference); ++u) {
        int dem_col = col * pow(2,level_difference) + u;
        int dem_row = row * pow(2,level_difference) + v;

        // Create the level directory (if it doesn't exist)
        std::ostringstream ostr;
        ostr << base_output_name << "/" << dem_level;
        if ( !fs::exists(ostr.str()) )
          fs::create_directory(ostr.str());
    
        // Create the column directory (if it doesn't exist)
        ostr << "/" << dem_col;
        if ( !fs::exists(ostr.str()) )
          fs::create_directory(ostr.str());
        
        // Create the file (with the row as the filename)
        ostr << "/" << dem_row;
           
        // Open the file for writing
        std::ofstream of(ostr.str().c_str());
    
        // Iterate over the triangle vertex arrays above, writing the DEM
        // values in INTEL byte order to disk.
        for (int i = 0; i < num_toast_indices; ++i) {
          float u_sample_index = u * ((interp_tile.cols() - 1) / pow(2,level_difference)) + 
            float(u_toast_indices[i]) / 32.0 * (interp_tile.cols() - 1) / pow(2,level_difference);
          float v_sample_index = v * ((interp_tile.rows() - 1) / pow(2,level_difference)) +
            float(v_toast_indices[i]) / 32.0 * (interp_tile.rows() - 1) / pow(2,level_difference);

          // TODO: Thing about what to do if the pixel has alpha!
          PixelGrayA<int16> value = interp_tile( u_sample_index, v_sample_index );
          uint8 lsb = uint8(value[0] & 0xFF);
          uint8 msb = uint8((value[0] >> 8) & 0xFF);
          of.write((char*)(&lsb), 1);
          of.write((char*)(&msb), 1);
        }

        // Clean up.
        of.close();
      }
    }

  } catch (TileNotFoundErr &e) { 
    // Do nothing if the tile does not exist
  }

}
